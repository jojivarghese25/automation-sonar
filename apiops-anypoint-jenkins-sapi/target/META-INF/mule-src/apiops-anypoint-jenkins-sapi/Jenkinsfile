pipeline {
    agent any
    tools {
        maven 'Maven' 
	    jdk 'Jdk'
    }
    stages {
        stage('Build') {
            steps {
                sh "mvn -f sonarqube-poc/pom.xml clean install -DskipTests"
            }
        } 
        stage ('Munit Test'){
        	steps {
        		sh "mvn -f sonarqube-poc/pom.xml test"
        	}
        }
        stage('SonarQube'){
            steps {
                withSonarQubeEnv('Sonarqube') {
                   sh "mvn -f sonarqube-poc/pom.xml sonar:sonar -Dsonar.host.url=http://localhost:9000 -Dsonar.sources=src/"
           
                }
            }
        }
        stage('Quality Gate'){
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') { 
                        sh "curl -u admin:admin -X GET -H 'Accept: application/json' http://localhost:9000/api/qualitygates/project_status?projectKey=com.mycompany:sonarqube-poc > status.json"
                        def json = readJSON file:'status.json'
                        echo "${json.projectStatus}"
                        if ("${json.projectStatus.status}" != "OK") {
                            currentBuild.result = 'FAILURE'
                            error('Pipeline aborted due to quality gate failure.')
                        }
                    }
                }
            }
            
        }
        stage('Deploy to Cloudhub'){
        	steps {
        		sh "mvn -f sonarqube-poc/pom.xml clean package deploy -Dusername=sivendu04 -Dpassword=Mulesoft903 -DapplicationName=mule-sonarqube-poc-njctest -Denvironment=Sandbox -DmuleDeploy"
        	}
        }
        stage('GenerateReports') {
      		steps {
        		cucumber(failedFeaturesNumber: -1, failedScenariosNumber: -1, failedStepsNumber: -1, fileIncludePattern: 'cucumber.json', jsonReportDirectory: 'apios-anypoint-jenkins-sapi/target', pendingStepsNumber: -1, skippedStepsNumber: -1, sortingMethod: 'ALPHABETICAL', undefinedStepsNumber: -1)
      }
    }

    	stage('FunctionalTesting') {
     		steps {
        		withEnv(overrides: ["JAVA_HOME=${ tool 'JDK 8' }", "PATH+MAVEN=${tool 'Maven'}/bin:${env.JAVA_HOME}/bin"]) {
          		sh 'mvn test'
        }

      }
    }

    	stage('fetch properties') {
      		steps {
        		script {
          			readProps= readProperties file: 'apios-anypoint-jenkins-sapi/email.properties'
          			echo "${readProps['email.to']}"
        }

      }
    }

    	stage('Email') {
      		steps {
        		emailext(subject: 'Testing Reports for $PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!', body: 'Please find the functional testing reports. In order to check the logs also, please go to url: $BUILD_URL'+readFile("emailTemplate.html"), attachmentsPattern: 'apios-anypoint-jenkins-sapi/target/cucumber-reports/report.html', from: "${readProps['email.from']}", mimeType: "${readProps['email.mimeType']}", to: "${readProps['email.to']}")
      }
    }

  }
    }
}
